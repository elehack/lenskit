buildscript {
    repositories {
        maven {
            url project.testRepoURI
        }
        mavenCentral()
    }
    dependencies {
        classpath "org.lenskit:lenskit-gradle:$project.lenskitVersion"
        classpath 'org.hamcrest:hamcrest-library:1.3'
        classpath 'org.yaml:snakeyaml:1.17'
    }
}

import org.lenskit.gradle.*
import static org.hamcrest.MatcherAssert.assertThat
import org.yaml.snakeyaml.*

apply plugin: 'java'
apply plugin: 'lenskit'
apply from: 'common.gradle'
apply from: 'renjin.gradle'

task crossfold(type: Crossfold) {
    input textFile {
        file ratingsFile
        delimiter "\t"
    }
    outputFormat "gz"
    partitionCount 5
    userPartitionMethod holdout(5)
    includeTimestamps false

    doLast {
        logger.info("marking crossfolds as to-be-isolated")
        def parser = new Yaml()
        def cfFile = file("$outputDirectory/datasets.yaml")
        def cfSpec = parser.load(cfFile.text)
        cfSpec.isolate = true
        cfFile.text = parser.dump(cfSpec)
    }
}

task trainTest(type: TrainTest) {
    maxMemory '512m'
    dataSet crossfold
    cacheDirectory 'cache'
    outputFile 'results.csv'
    userOutputFile 'users.csv'
    logFile 'evaluate.log'
    logFileLevel 'TRACE'
    algorithm 'algorithms.groovy'
    predict {
        outputFile 'predictions.csv'
        metric 'coverage'
        metric 'rmse'
    }
}

verifyR.dependsOn trainTest
verifyR.doFirst {
    assertThat("output file should exist", file('results.csv').exists())
    assertThat("prediction file should exist", file('predictions.csv').exists())
}
