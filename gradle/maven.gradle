/*
 * LensKit, an open-source toolkit for recommender systems.
 * Copyright 2014-2017 LensKit contributors (see CONTRIBUTORS.md)
 * Copyright 2010-2014 Regents of the University of Minnesota
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
/*
 * This build script contains code for uploading to Maven.
 */

apply plugin: 'maven'
apply plugin: 'signing'

class ProjectMeta {
    def String name
    def String description
    def String packaging = 'jar'

    def call(Closure block) {
        ClosureUtil.configure(this, block)
    }
}
extensions.create('meta', ProjectMeta)

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

configurations {
    mavenCentral
    mavenCentral.extendsFrom archives
}
artifacts {
    archives sourcesJar
    mavenCentral javadocJar
}

signing {
    required {
        !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask('uploadArchives')
    }
    sign configurations.archives, configurations.mavenCentral
}

tasks.withType(Sign) {
    it.onlyIf {
        for (task in gradle.taskGraph.allTasks) {
            if (task.name == 'uploadArchives') {
                return true;
            } else if (task.name == 'install') {
                return true;
            }
        }
        return false;
    }
}

install {
    def installUrl = project.getConfigProperty('install.url', null)
    if (installUrl != null) {
        logger.info 'installing to $installUrl'
        repositories.clear()
        repositories {
            mavenDeployer {
                repository(url: rootProject.uri(installUrl))
            }
        }
    }
}

task installForTesting(type: Upload) {
    repositories {
        mavenDeployer {
            repository(url: rootProject.uri('build/lenskit-current-repo'))
        }
    }
    configuration = configurations.archives
}
// enforce ordering on the testing-install operation for parallel builds
// FIXME enforce ordering between adjacent projects
afterEvaluate {
    def pdeps = configurations.runtime.allDependencies.withType(ProjectDependency)
    def pdNames = pdeps*.dependencyProject*.path
    pdNames.each {
        installForTesting.dependsOn "$it:installForTesting"
    }
}

uploadArchives {
    configuration = configurations.mavenCentral
    repositories.mavenDeployer {
        def user = System.getenv('SONATYPE_USER') ?: project.getConfigProperty('deploy.user', null)
        def password = System.getenv('SONATYPE_PASSWORD') ?: project.getConfigProperty('deploy.password', null)

        def deployUrl = project.getConfigProperty('deploy.url', null)
        if (deployUrl != null) {
            deployUrl = rootProject.uri(deployUrl)
        }
        repository(url: deployUrl ?: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            if (user != null && password != null) {
                authentication(userName: user, password: password)
            }
        }

        if (deployUrl == null) {
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                if (user != null && password != null) {
                    authentication(userName: user, password: password)
                }
            }
        }

        beforeDeployment { deploy ->
            signing.signPom(deploy)
        }
    }
    // allow deploy to be skipped on the command line
    onlyIf {
        !(project.getConfigProperty('deploy.skip', 'false').toBoolean())
    }
}

rootProject.ciPublish.dependsOn uploadArchives

// set up the Maven metadata at the end of configuration
afterEvaluate {
    uploadArchives.repositories.mavenDeployer.pom.project {
        name meta.name
        packaging 'jar'
        // optionally artifactId can be defined here
        description meta.description
        url 'http://lenskit.org'

        scm {
            connection 'scm:git:http://github.com/grouplens/lenskit.git'
            developerConnection 'scm:git:git@github.com:grouplens/lenskit.git'
            url 'http://github.com/grouplens/lenskit'
        }

        licenses {
            license {
                name 'MIT License'
                url 'https://opensource.org/licenses/MIT'
            }
        }

        developers {
            developer {
                id 'ekstrand'
                name 'Michael Ekstrand'
                email 'ekstrand@txstate.edu'
            }
        }
    }
}
