import java.util.zip.ZipFile

apply plugin: 'distribution'
evaluationDependsOn ':lenskit-cli'
ext.cliProject = project(':lenskit-cli')

repositories {
    mavenCentral()
}

// aggregate license info and notices from dependencies
task notices(group: 'build') {
    ext.noticeFile = "$buildDir/NOTICE.txt"
    inputs.files configurations.runtime
    outputs.file noticeFile

    doFirst {
        mkdir buildDir
    }
    doLast {
        def cfg = configurations.runtime.resolvedConfiguration
        file(noticeFile).withPrintWriter { out ->
            out.println("This file contains the notices required by the libraries used by LensKit.")
            out.println()

            cfg.resolvedArtifacts*.file.each { File jar ->
                def zip = new ZipFile(jar)
                try {
                    def noticeEntry = zip.getEntry("META-INF/NOTICE.txt")
                    if (noticeEntry != null) {
                        def notice = zip.getInputStream(noticeEntry).text
                        out.println("${jar.name}:")
                        notice.eachLine { line ->
                            out.println("    ${line}")
                        }
                        out.println()
                    }
                } finally {
                    zip.close()
                }
            }
        }
    }
}

task startScripts(type: CreateStartScripts) {
    outputDir = file("$buildDir/scripts")
    mainClassName = 'org.lenskit.cli.Main'
    applicationName = 'lenskit'
    classpath = cliProject.jar.outputs.files + cliProject.configurations.runtime
}

distTar {
    extension 'tgz'
    compression Compression.GZIP
}

build.dependsOn installDist

if (hasProperty('lenskit.install.dir')) {
    installDist.destinationDir = rootProject.file(getProperty('lenskit.install.dir'))
}

class MvnDep {
    final def Project project
    final def ComponentIdentifier id
    final def ResolvedComponentResult dependency

    public MvnDep(Project prj, ComponentIdentifier i, ResolvedComponentResult dep) {
        project = prj;
        id = i
        dependency = dep
    }

    public Set<ComponentArtifactsResult> getResolvedComponents() {
        def jvmResult = project.dependencies.createArtifactResolutionQuery()
                               .forComponents(id)
                               .withArtifacts(JvmLibrary, SourcesArtifact)
                               .execute()
        def mvnResult = project.dependencies.createArtifactResolutionQuery()
                               .forComponents(id)
                               .withArtifacts(MavenModule, MavenPomArtifact)
                               .execute()
        jvmResult.resolvedComponents + mvnResult.resolvedComponents
    }

    public List<File> getFiles() {
        def files = []
        files.addAll(resolvedComponents*.getArtifacts(SourcesArtifact).collectMany { it*.file })
        files.addAll(resolvedComponents*.getArtifacts(MavenPomArtifact).collectMany { it*.file })
        files
    }
}

List<MvnDep> gatherDeps() {
    def deps = cliProject.configurations.runtime.incoming.resolutionResult.allDependencies
    def componentIds = deps.collect { it.selected.id }

    deps.collect { new MvnDep(project, it.selected.id, it.selected) }
}

task makeLocalMavenDist {
    dependsOn ':lenskit-integration-tests:makeTestRepo'
    inputs.files {
        gatherDeps().collectMany { it.files }
    }
    inputs.dir rootProject.file('build/test-repo')
    outputs.dir "$buildDir/lenskit-repo"

    doLast {
        copy {
            from rootProject.file('build/test-repo')
            into "$buildDir/lenskit-repo"
        }
        for (dep in gatherDeps()) {
            if (!(dep.id instanceof ModuleComponentIdentifier)) {
                continue
            }
            logger.info "copying $dep.id"
            logger.info "components $dep.resolvedComponents"
            def gdir = dep.id.group.replace('.', '/')
            def mvnDir = "$gdir/$dep.id.module/$dep.id.version"
            logger.info("copying $dep.files into $mvnDir")
            copy {
                from files(dep.files)
                into "$buildDir/lenskit-repo/$mvnDir"
            }
        }
    }
}

distributions {
    main {
        baseName = 'lenskit'
        contents {
            from(startScripts) {
                into 'bin'
            }
            from notices
            from(project(':lenskit-cli').tasks['renderManPages']) {
                into 'man'
            }
            from(rootProject.tasks['javadoc']) {
                into 'javadoc'
            }
            from(startScripts.classpath) {
                into 'lib'
            }
        }
    }
    maven {
        baseName = 'lenskit-repo'
        contents {
            from makeLocalMavenDist
        }
    }
}
