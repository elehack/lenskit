import java.util.zip.ZipFile

apply plugin: 'distribution'
evaluationDependsOn ':lenskit-cli'
ext.cliProject = project(':lenskit-cli')

// aggregate license info and notices from dependencies
task notices(group: 'build') {
    ext.noticeFile = "$buildDir/NOTICE.txt"
    inputs.files configurations.runtime
    outputs.file noticeFile

    doFirst {
        mkdir buildDir
    }
    doLast {
        def cfg = configurations.runtime.resolvedConfiguration
        file(noticeFile).withPrintWriter { out ->
            out.println("This file contains the notices required by the libraries used by LensKit.")
            out.println()

            cfg.resolvedArtifacts*.file.each { File jar ->
                def zip = new ZipFile(jar)
                try {
                    def noticeEntry = zip.getEntry("META-INF/NOTICE.txt")
                    if (noticeEntry != null) {
                        def notice = zip.getInputStream(noticeEntry).text
                        out.println("${jar.name}:")
                        notice.eachLine { line ->
                            out.println("    ${line}")
                        }
                        out.println()
                    }
                } finally {
                    zip.close()
                }
            }
        }
    }
}

task startScripts(type: CreateStartScripts) {
    outputDir = file("$buildDir/scripts")
    mainClassName = 'org.lenskit.cli.Main'
    applicationName = 'lenskit'
    classpath = cliProject.jar.outputs.files + cliProject.configurations.runtime
}

distributions {
    main {
        baseName = 'lenskit'
        contents {
            from(startScripts) {
                into 'bin'
            }
            from notices
            from(project(':lenskit-cli').tasks['renderManPages']) {
                into 'man'
            }
            from(rootProject.tasks['javadoc']) {
                into 'javadoc'
            }
            from(startScripts.classpath) {
                into 'lib'
            }
        }
    }
}

distTar {
    extension 'tgz'
    compression Compression.GZIP
}

build.dependsOn installDist

if (hasProperty('lenskit.install.dir')) {
    installDist.destinationDir = rootProject.file(getProperty('lenskit.install.dir'))
}

task resolveSources << {
    def componentIds = configurations.runtime.incoming.resolutionResult.allDependencies.collect { it.selected.id }

    def result = dependencies.createArtifactResolutionQuery()
                             .forComponents(componentIds)
                             .withArtifacts(JvmLibrary, SourcesArtifact, JavadocArtifact)
                             .execute()

    for (component in result.resolvedComponents) {
        println "Artifact ${component.id}"
        println "  ID has class ${component.id.class}"
        component.getArtifacts(SourcesArtifact).each { println "Source artifact: ${it.file}" }
        component.getArtifacts(JavadocArtifact).each { println "Source artifact: ${it.file}" }
    }
}
